{"ast":null,"code":"import { TOTAL_SCREENS } from './commonUtils';\nimport { Subject } from 'rxjs';\nexport default class ScrollService {\n  constructor() {\n    this.scrollToHireMe = () => {\n      let contactMeScreen = document.getElementById(\"Contact Me\");\n      if (!contactMeScreen) return;\n      contactMeScreen.scrollIntoView({\n        behavior: \"smooth\"\n      });\n    };\n\n    this.scrollToHome = () => {\n      let homeScreen = document.getElementById(\"Home\");\n      if (!homeScreen) return;\n      homeScreen.scrollIntoView({\n        behavior: \"smooth\"\n      });\n    };\n\n    this.isElementInView = (elem, type) => {\n      let rec = elem.getBoundingClientRect();\n      let elementTop = rec.Top;\n      let elementBottom = rec.Bottom;\n      let partiallyVisibile = elementTop < window.innerHeight && elementBottom >= 0;\n      let completelyVisible = elementTop >= 0 && elementBottom <= window.innerHeight;\n\n      switch (type) {\n        case \"partial\":\n          return partiallyVisible;\n\n        case \"complete\":\n          return completelyVisible;\n\n        default:\n          return false;\n      }\n    };\n\n    this.checkCurrentScreenUnderViewport = event => {\n      if (!event || object.keys(event).length < 1) return;\n\n      for (let screen of TOTAL_SCREENS) {\n        let screenFromDOM = document.getElementById(screen.screen_username);\n        if (!screenFromDOM) continue;\n        let fullyVisible = this.isElementInView(screenFromDOM, \"complete\");\n        let partiallyVisible = this.isElementInView(screenFromDOM, \"partial\");\n\n        if (fullyVisible || partiallyVisible) {\n          if (partiallyVisible && !screen.alreadyRendered) {\n            ScrollService.currentScreenFadeIn.next({\n              fadeInScreen: screen.screen_name\n            });\n            screen['alreadyRendered'] = true;\n            break;\n          }\n\n          if (fullyVisible) ScrollService.currentScreenBroadCaster.next({\n            screenInView: screen.screen_name\n          });\n          break;\n        }\n      }\n    };\n\n    window.addEventListener('scroll', this.checkCurrentScreenUnderViewport);\n  }\n\n}\nScrollService.scrollHandler = new ScrollService();\nScrollService.currentScreenBroadCaster = new Subject();\nScrollService.currentScreenFadeIn = new Subject();","map":{"version":3,"sources":["C:/Users/kaiwa/OneDrive/Desktop/portfolio2022/client/src/utilities/ScrollService.js"],"names":["TOTAL_SCREENS","Subject","ScrollService","constructor","scrollToHireMe","contactMeScreen","document","getElementById","scrollIntoView","behavior","scrollToHome","homeScreen","isElementInView","elem","type","rec","getBoundingClientRect","elementTop","Top","elementBottom","Bottom","partiallyVisibile","window","innerHeight","completelyVisible","partiallyVisible","checkCurrentScreenUnderViewport","event","object","keys","length","screen","screenFromDOM","screen_username","fullyVisible","alreadyRendered","currentScreenFadeIn","next","fadeInScreen","screen_name","currentScreenBroadCaster","screenInView","addEventListener","scrollHandler"],"mappings":"AAAA,SAAQA,aAAR,QAA4B,eAA5B;AACA,SAAQC,OAAR,QAAsB,MAAtB;AAEA,eAAe,MAAMC,aAAN,CAAoB;AAM/BC,EAAAA,WAAW,GAAE;AAAA,SAGbC,cAHa,GAGI,MAAI;AACjB,UAAIC,eAAe,GAAGC,QAAQ,CAACC,cAAT,CAAwB,YAAxB,CAAtB;AACA,UAAG,CAACF,eAAJ,EAAqB;AACrBA,MAAAA,eAAe,CAACG,cAAhB,CAA+B;AAACC,QAAAA,QAAQ,EAAC;AAAV,OAA/B;AACH,KAPY;;AAAA,SAQbC,YARa,GAQE,MAAI;AACf,UAAIC,UAAU,GAAGL,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAAjB;AACA,UAAG,CAACI,UAAJ,EAAgB;AAChBA,MAAAA,UAAU,CAACH,cAAX,CAA0B;AAACC,QAAAA,QAAQ,EAAC;AAAV,OAA1B;AACH,KAZY;;AAAA,SAabG,eAba,GAaI,CAACC,IAAD,EAAOC,IAAP,KAAc;AAC3B,UAAIC,GAAG,GAAGF,IAAI,CAACG,qBAAL,EAAV;AACA,UAAIC,UAAU,GAAGF,GAAG,CAACG,GAArB;AACA,UAAIC,aAAa,GAAGJ,GAAG,CAACK,MAAxB;AAEA,UAAIC,iBAAiB,GAAGJ,UAAU,GAAEK,MAAM,CAACC,WAAnB,IAAkCJ,aAAa,IAAG,CAA1E;AACA,UAAIK,iBAAiB,GAAGP,UAAU,IAAI,CAAd,IAAmBE,aAAa,IAAGG,MAAM,CAACC,WAAlE;;AAEA,cAAOT,IAAP;AACI,aAAK,SAAL;AACA,iBAAOW,gBAAP;;AAEA,aAAK,UAAL;AACI,iBAAOD,iBAAP;;AACA;AACA,iBAAO,KAAP;AAPR;AASH,KA9BY;;AAAA,SAgCbE,+BAhCa,GAgCsBC,KAAD,IAAW;AACzC,UAAG,CAACA,KAAD,IAAUC,MAAM,CAACC,IAAP,CAAYF,KAAZ,EAAmBG,MAAnB,GAA4B,CAAzC,EACA;;AACA,WAAK,IAAIC,MAAT,IAAmB/B,aAAnB,EAAkC;AAC9B,YAAIgC,aAAa,GAAG1B,QAAQ,CAACC,cAAT,CAAwBwB,MAAM,CAACE,eAA/B,CAApB;AACA,YAAG,CAACD,aAAJ,EACA;AAEA,YAAIE,YAAY,GAAG,KAAKtB,eAAL,CAAqBoB,aAArB,EAAoC,UAApC,CAAnB;AAAmE,YAAIP,gBAAgB,GAAG,KAAKb,eAAL,CAAqBoB,aAArB,EAAoC,SAApC,CAAvB;;AAEnE,YAAGE,YAAY,IAAIT,gBAAnB,EAAqC;AACjC,cAAGA,gBAAgB,IAAI,CAACM,MAAM,CAACI,eAA/B,EAA+C;AAC3CjC,YAAAA,aAAa,CAACkC,mBAAd,CAAkCC,IAAlC,CAAuC;AACnCC,cAAAA,YAAY,EAAEP,MAAM,CAACQ;AADc,aAAvC;AAGAR,YAAAA,MAAM,CAAC,iBAAD,CAAN,GAA4B,IAA5B;AACA;AACH;;AACD,cAAGG,YAAH,EACAhC,aAAa,CAACsC,wBAAd,CAAuCH,IAAvC,CAA4C;AACxCI,YAAAA,YAAY,EAAEV,MAAM,CAACQ;AADmB,WAA5C;AAGA;AACH;AACJ;AACJ,KAzDY;;AACTjB,IAAAA,MAAM,CAACoB,gBAAP,CAAwB,QAAxB,EAAkC,KAAKhB,+BAAvC;AACH;;AAR8B;AAAdxB,a,CACVyC,a,GAAgB,IAAIzC,aAAJ,E;AADNA,a,CAGVsC,wB,GAA2B,IAAIvC,OAAJ,E;AAHjBC,a,CAIVkC,mB,GAAsB,IAAInC,OAAJ,E","sourcesContent":["import {TOTAL_SCREENS} from './commonUtils'\r\nimport {Subject} from 'rxjs'\r\n\r\nexport default class ScrollService {\r\n    static scrollHandler = new ScrollService();\r\n\r\n    static currentScreenBroadCaster = new Subject()\r\n    static currentScreenFadeIn = new Subject()\r\n\r\n    constructor(){\r\n        window.addEventListener('scroll', this.checkCurrentScreenUnderViewport);\r\n    }\r\n    scrollToHireMe = ()=>{ \r\n        let contactMeScreen = document.getElementById(\"Contact Me\")\r\n        if(!contactMeScreen) return;\r\n        contactMeScreen.scrollIntoView({behavior:\"smooth\"})\r\n    }\r\n    scrollToHome = ()=>{ \r\n        let homeScreen = document.getElementById(\"Home\")\r\n        if(!homeScreen) return;\r\n        homeScreen.scrollIntoView({behavior:\"smooth\"})\r\n    }\r\n    isElementInView =(elem, type)=>{\r\n        let rec = elem.getBoundingClientRect();\r\n        let elementTop = rec.Top;\r\n        let elementBottom = rec.Bottom;\r\n\r\n        let partiallyVisibile = elementTop <window.innerHeight && elementBottom >=0;\r\n        let completelyVisible = elementTop >= 0 && elementBottom <=window.innerHeight;\r\n\r\n        switch(type) {\r\n            case \"partial\":\r\n            return partiallyVisible;\r\n\r\n            case \"complete\":\r\n                return completelyVisible\r\n                default:\r\n                return false\r\n        }\r\n    }\r\n\r\n    checkCurrentScreenUnderViewport = (event) => {\r\n        if(!event || object.keys(event).length < 1)\r\n        return;\r\n        for (let screen of TOTAL_SCREENS) {\r\n            let screenFromDOM = document.getElementById(screen.screen_username);\r\n            if(!screenFromDOM)\r\n            continue;\r\n\r\n            let fullyVisible = this.isElementInView(screenFromDOM, \"complete\");let partiallyVisible = this.isElementInView(screenFromDOM, \"partial\")\r\n\r\n            if(fullyVisible || partiallyVisible) {\r\n                if(partiallyVisible && !screen.alreadyRendered){\r\n                    ScrollService.currentScreenFadeIn.next({\r\n                        fadeInScreen: screen.screen_name\r\n                    });\r\n                    screen['alreadyRendered'] = true;\r\n                    break;\r\n                }\r\n                if(fullyVisible)\r\n                ScrollService.currentScreenBroadCaster.next({ \r\n                    screenInView: screen.screen_name,\r\n                });\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}